#!/usr/bin/env python
#  Copyright (C) 2014  Instituto Nokia de Tecnologia - INdT
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
from __future__ import print_function
import argparse
from target_format import parse_setup

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Compare nRF8001 setup data " +
            "from two nRFgoStudio report files.")
    parser.add_argument("report", type=file, nargs=2,
            help="report generated by nRFgoStudio (ublue_setup.gen.out.txt)")
    args = parser.parse_args()

    version, data1 = parse_setup(args.report[0])
    version, data2 = parse_setup(args.report[1])

    print("File #1: " + args.report[0].name)
    print("File #2: " + args.report[1].name)
    print()

    only_in_first = set(data1) - set(data2)
    if only_in_first:
        print("Targets only in %s: %s" % (args.report[0].name,
            ", ".join("0x%02X" % i for i in only_in_first)))

    only_in_first = set(data2) - set(data1)
    if only_in_first:
        print("Targets only in %s: %s" % (args.report[1].name,
            ", ".join("0x%02X" % i for i in only_in_first)))

    for target in sorted(set(data1) & set(data2)):
        d1 = data1[target].decode("hex")
        d2 = data2[target].decode("hex")
        for (offset, byte) in enumerate(d1):
            if offset == len(d2):
                break
            if byte != d2[offset]:
                print("[0x%02X] Differ at 0x%02X: %02X -> %02X" % (target,
                    offset, ord(byte), ord(d2[offset])))
        if len(d1) > len(d2):
            print("[0x%02X] Bytes only in %s: %s" % (target,
                args.report[0].name, " ".join("%02X" % i for i in d1[offset:])))
        elif len(d1) < len(d2):
            print("[0x%02X] Bytes only in %s: %s" % (target,
                args.report[1].name, " ".join("%02X" % i for i in d2[offset + 1:])))

#    print("Setup Data:")
#    pprint(setup_data)
#
#    print("\nTarget 0x00:")
#    target = Target_00.parse(setup_data[0x00].decode("hex"))
#    print(target)
#    assert target["dll_version"] == version
